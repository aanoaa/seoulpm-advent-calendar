Title:    How to Use CPAN, Actually
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Author:   y0ngbin

저자
-----

[@y0ngbin](twitter-y0ngbin)


시작하며
--------

 어떤 사람들을 Perl을 좋아합니다. 어떤 사람들은 Perl을 그다지 좋아하지 않습니다.
하지만 여러분이 어느쪽이든 상관없이 *어떤 작업*을 해야하는 상황이라면
*여러분이 필요한 무언가*는 [CPAN][cpan]에 이미 존재할 확률이 매우 높습니다.
CPAN은 단일 언어 공개 라이브러리 저장소 중에서 가장 큰 규모와 긴 역사,
튼튼한 커뮤니티를 가지고 있고, 지금 이 순간에도 그들만의 방식으로
계속 발전해 나가고 있기 때문입니다.

 심지어 어떤 사람들은 Perl을 *CPAN을 사용하기 위한 도구*라고 지칭할
정도로 Perl과 CPAN은 밀접한 관계를 맺고 있습니다.
하지만 실제로 CPAN을 충분히 활용하려면 책에서 다루는 내용을 익히는 것 만으로는 조금 부족할 수 있습니다.
오늘은 우리가 *실제로* CPAN을 사용하고자 할 때 알아야 할 내용을 *실용적인 관점*에서 소개하겠습니다.

이 글에서 대문자 CPAN은 Perl 의 CPAN 저장소를 지칭하고 소문자
`cpan`은 CPAN을 사용하기 위한 [CPAN 공식 프로그램][appcpan]을 지칭합니다.



What is CPAN
-------------

 CPAN은 Comprehensive Perl Archive Network의 약자로 현재 102,000개 이상의
모듈이 관리되고 있는 인터넷 공개 Perl 모듈 저장소 입니다. Perl의 모듈은
Java의 이름공간(Namespace)와 같은 개념으로 각각의 계층구조를 가지고
있고 구분자는 `::`을 사용합니다. `Net::`, `Algorithm::`과 같이
이름공간이 모듈의 역활 과 딱 맞아떨어지는 모듈이 있는가 하면 일부
모듈은 독특한 이름으로 최상위 이름공간 등록되는 경우도 있습니다.
(`Moose::`, `Catalyst::`) 이는 엄숙함을 강요하지 않는 자유로운 펄
문화의 단면을 보여주는 부분이기도 합니다.

 CPAN은 거대한 모듈저장소인 동시에 MSDN과 같은 문서 저장소이기도 합니다.
이는 [POD(Plain Old Documentation format)][perl-pod] 라고 하는
펄의 마크업 시스템 때문에 가능합니다. POD는 소스코드와 함께 문서를
저장하는 방식이며 CPAN에 등록되는 모든 펄 모듈은 일정 수준 이상의
POD 마크업을 통한 문서를 제공하고 있습니다.

 실재로 Perl 과 CPAN을 좋아하는 사람들이 가장 크게 심을 느끼고 있는
부분은 CPAN의 방대한 규모 뿐만 아니라, 엄격하게 관리되고 있는 모듈의
품질입니다. 오랜시간동안 관리되는 복잡한 의존관계를 가진 프로젝트를 경험해
보신 분들이라면 하위호완성을 지키면서 기능을 추가해 나가는 것이 마치
*뒤를 바라보며 앞으로 뛰는것* 처럼 힘들고 어려운 일이라는점을 잘 알고
있을 것입니다. 하지만 Perl은 오래전부터 내부적으로 엄격하게 각 모듈 단위의
테스트를 권고하고 있고 뿐만 아니라 **지원하는 모든 Perl 버전에서의
플렛폼 별 모듈 동작상황** 에 대해서 [자동으로 테스팅하고 관리][perltester]
하는 플렛폼을 스스로 만들고 유지해 나가고 있습니다.

 펄의 모듈은 순수하게 Perl로 작성된 코드 뿐만 아니라 성능 등의 이유로
C 언어로 작성횐 XS 모듈들이 존재 하기 때문에 현재 모든 CPAN 모듈이
100% 완벽한 이식성을 가지고 있는것은 아닙니다. 하지만 적어도 어떤
플렛폼에서 어떤 버전의 펄과 어떤 모듈이 어떤 모듈과의 의존성에
영향을 주면서 문제가 있는지에 대한 정보를 가지고 있고 그 정보를
기반으로 지속적으로 상황을 개선시켜 나가고 있습니다.
(예를 들어 Advent Calendar 2일차에 소개된 [File::Map][cpan-file-map] 모듈의
Perl 버전별 Windowns 플렛폼 호환을 확인하고싶다면
[이 내용][file-map] 을 확인하면 됩니다)

 그 밖에 CPAN은 [RT][rt]라는 이슈트레커를 이용해서 모듈별 이슈를 관리하고
있으며 CPAN에 모듈을 등록하기 위한 내부 개발자 등록 시스템으로
[PAUSE][pause]를 운영하고 있습니다.

perl & cpan basic
------------------

 지금까지 CPAN에 특징과 장점에 대해 알아봤습니다. 이제부터는 실전에
돌입해서 내 환경에서 자유자재로 perl과 cpan을 사용하는데 알아야
할 것들을 알아보겠습니다.

### I am using perl. but which perl?

 먼저 perl 개발 환경을 구축하는데 있어 가장 먼저 확실히 짚고
넘어가야할 문제는 내가 현재 쓰는 `perl`이 과연 어떤 perl 인가?
하는 점입니다. 여기서는 두가지 상황을 확인하면 됩니다. (unix기준)

    #!bash
    which perl
    perl -V

`which perl`을 통해 내가 현재 사용하고 있는 perl binary가 무엇인지
확인하고 `perl -V`를 통해서는 그 binary와 내 환경에서 등록된 `@INC`가
무엇인지를 확인합니다. (`perl -V` 의 출력중 가장 마지막)

perl은 binary마다 별도의 `@INC` 구성을 가질 수 있기 때문에 현재 내가
하는 작업에서 정확하게 어떤 perl을 호출했냐에 따라서 의도치 않게
문제가 복잡하게 꼬이는 경우가 많이있습니다. 따라서 항상 뭔가
상황이 잘못돌아간다고 느껴지신다면 꼭 현재 사용하고 있는 환경을
확인하시기 바랍니다.

### @INC ?

perl 과 CPAN 을 잘 활용하기 위해 꼭 넘어야 하는 중요한 관문은 `@INC`에 대한
이해입니다. 사실 `@INC`는 별로 특별하거나 어려운 개념이 아닙니다.
`@INC`는 java의  `CLASSPATH`, php 의 `include_path`, 혹은 우리가 shell
에서 사용하는 `PATH` 환경변수와 아주 비슷한 역활을 하는 Perl의 내부
환경 변수라고 볼 수 있습니다.

 즉 특별한 인자없이 실행한 perl은 위 perl -V 로 확인한 @INC에 등록된
디렉토리들을 **순서대로** 돌며 모듈의 이름공간에 해당하는 파일을
찾습니다.

 여기서 한단계 더 나아가서 @INC에 대해 꼭 알아두어야 하는사항은 펄에서
사용하는 `core module,site_perl` 이라는 개념입니다.

@INC에 등록된 디렉토리를 자세히 살펴보면 약간의 페턴을 발견할수 있는데

    #!bash
    |-- 5.12.2
    `-- site_perl
        `-- 5.12.2

이런 구조의 디렉토리를 지칭한다는 점입니다. 여기서 위에 5.12.2 아래에
들어가 보시면 많은 파일과 디렉토리가 있는데 이 디렉토리가 바로 `core module`
디렉토리입니다. `core module`이란 perl 인터프린터가 배포될때 기본적으로
같이 배포되는 모듈을 지칭하는것으로 실재 perl과 한몸으로 생각하는
환경입니다. 즉 내가 perl 5.10 을 정상적으로 사용한다면 File::Basname, Encode와
같은 모듈은 무조건 있다고 가정하고 사용하는 모듈이라고 보면 됩니다.
perl 버전별로 이 `core module`도 조금씩 변천이 있었기 때문에 자세한 목록과
내용은 [CPAN을 통해서][perlcpan] 확인해 보시면 됩니다.

반면 site\_perl 디렉토리의 경우 하위에 Perl 버전디렉토리가 있는것을 볼
수 있는데 이 디렉토리는 바로 우리가 `cpan` 명령 등을 통해 추가적으로 설치한
외부 모듈들이 저장되는 공간입니다. 즉 우리가 cpan을 통해 설치했던 혹은
직접 압축파일을 내려받아 설치했던 상관없이 사용자가 추가적으로 설치한 모듈은
site\_perl 디렉토리 하위 해당 펄 버전 디렉토리 밑에 존재하는 것을 의미합니다.

일반적으로 core module은 수동으로 삭제, 변경을 하지않는 반면 site\_perl에
저장된 모듈은 cpan이 따로 모듈 삭제방법을 제공하지 않기 때문에 필요하다면
직접 관련파일을 삭제할 수 있습니다.

드디어 cpan!
------------

- cpan or perl -MCPAN -eshell
- `cpan` 사용방법
- `alias cpan='PERL_MM_USE_DEFAULT=1 cpan'`

`cpan` 과 `perl -MCPAN -eshell`은 **같을수도 있지만 다를수도 있**습니다.
왜냐하면 `cpan`은 첫줄의 shebang line에 의해서 해석기가 결정되는
perl script이기 때문에 shell 의 `PATH` 등의 문제로 실재 내가 사용하는
perl 과 다른 환경(`@INC`)를 가지고 있는 perl 에 모듈을 설치할 수도 있습니다
따라서 혹시 cpan 을 통해 설치한 모듈이 정상적으로 설치되었지만 찾을수 없거
나 의도한데로 동작하지 않는다면 먼저 꼭 ** 어떤 Perl ** 을 통해 실행되었는지
찬찬히 따져보시기 바랍니다.

### .cpan

마지막으로 CPAN 을 쓰기 위해 알아야하는 내용은 $HOME/.cpan 입니다. 이
디렉토리는 실재로 우리가 `cpan` 명령을 통해서 모듈을 설치할때 사용하는
모든 파일들이 관리되는 디렉토리입니다. 여기서 알아야할 주요 파일/디렉토리는
아래와 같습니다.

- CPAN/MyConfig.pm : 내가 설정한 `cpan`의 설정내용이 들어있습니다. 이 파일을 삭제하면 `cpan`의 설정을 다시할수 있습니다.
- build/ : `cpan`을 통해 설치한 모든 모듈의 build가 존재합니다.
- sources/ : `cpan`을 통해 내려받은 모든 모듈의 압축된 원본 소스파일을 보관합니다.

byone the cpan
--------------

사실 지금까지 알아본 cpan 의 사용방법은 최근 1~2년 사이에 조금은 '구식'
이 되어버린 방법입니다. 물론 본질적으로 CPAN을 사용하는 방식에는 크게
달라진 것이 없지만 perl 커뮤니티의 최근 분위기는 cpan을 좀더 쉽고
효율적으로 사용할수 있도록 도와주는 빛나는 아이디어들이 빠르게 채택되며
지지를 받고있는 상황입니다. 위에서 살펴본 내용을 충분히 이해했다면
아래 나오는 모듈들을 만나는 순간 cpan 이 부족했던 2%를 채워주는 통쾌함을
느낄 수 있을 것이라고 확신합니다.

### local::lib - root 권한없이 모듈을 설치하고 싶다.

[local::lib][cpan-local-lib]\: 내가 사용하는 펄(`which perl`)이 시스템의 기본 펄(`/usr/bin/perl`)이라면
일반적으로 `@INC`는 `/usr/local/lib` 이하입니다.
문제는 `root` 권한이 없는 일반사용자라면 이 경로에 쓰기권한이 없다는
점입니다. 이 문제는 root 권한으로 cpan 을 실행해서 설치하면 해결되지만
root 권한을 획득할 수 없는 환경이거나 별도의 독립된 구성의 CPAN 라이브러리
를 구성하고자 하려면 `local::lib`을 사용하면 깔끔하게 사용자별로 독립된
개발환경을 구축할 수 있습니다.

local::lib의 동작방식은 간단합니다. perl 실행기는 실행시점에 `PERL5LIB`
환경변수를 참조해서 등록되어있는 PATH를 `@INC`의 **최상위**에 등록합니다.
local::lib은 shell이 실행될때 구동되는 설정파일(`.profile`, `.bash_profile`)
에 등록되어 PERL5LIB을 등록해주는 간단한 일을 합니다.

local::lib을 사용하면 자신이 원하는 모듈을 root 권한없이 자유롭게
설치하고 사용할 수 있습니다.

### perlbrew - 나만의 최신 버전의 perl 을 사용하고 싶다

[perlbrew][cpan-perl-brew]\:
시스템에서 제공하는 Perl 실행기 자체의 버전이 낮은 경우 먼저
생각할 수 있는 해결방법은 홈디렉토리에 직접 펄 소스를 내려받고
컴파일해서 사용하는 것입니다. 실행파일 생성을 위해 필요한 기본적
인 컴파일러와 개발환경만 구축되어있다면 Perl을 직접 빌드해서
손쉽게 사용하는 방법을 제공합니다.

물론 perlbrew를 사용하지 않고 Perl 소스코드를 직접 내려받고 적절한 Prefix
옵션을 주고 컴파일한뒤 설치해도 동일한 효과를 볼 수 있지만 perlbrew는
사용자가 해야하는 일련의 과정들을 자동으로 진행해 주기때문에 좀 더
관리하기 수월합니다.

perlbrew를 사용하면서 얻을수 있는 부수적인 이점은, 앞서 소개한 local::lib
의 효과를 자연스럽게 포함한다는 점입니다. 왜냐하면 perlbrew를 통해 설치된
perl의 기본적인 prefix는 `$HOME/perl5/perlbrew/perls`이기 때문에
설치된 사용자가 @INC에 충분한 쓰기권한을 가지고 있기 때문입니다.

perlbrew compile 때 일반적으로 많이 사용하는 Thread 지원을 켜는 옵션은
다음과 같습니다.

`perlbrew -v install perl-5.12.3 -D=usethreads`

### minicpan - 빠르고 쾌적하게 offline 환경에서 CPAN을 사용하고 싶다

[minicpan][cpan-minicpan]\:
CPAN은 전세계의 많은 [local mirror][cpan-mirrors]를
확보하고 있기 때문에 적절한 mirror 설정을 한다면 속도가 느린편은 아니지만
의존관계가 복잡한 모듈의 경우 네트웍을 통해 받는시간이 부담스러울 수 있습니다.
혹은, 장기간 오프라인에서 작업을 해야하는데 필요한 모듈과 그 의존관계의
모듈을 미리 다 파악할수 없는 상황이라면 minicpan은 적절한 아주 적절한
해결책입니다.

minicpan이 정확하게 하는일은 "현재 CPAN 저장소에서 제공하는 모든 모듈의
최신버전을 지정한 Remote 서버에서 내려받아 로컬에 저장하는 것"입니다. 즉
간단한 minicpan 명령을 통해 100,000개의 전채 CPAN 모듈 최신버전을 내 PC로
내려 받을수 있는것입니다.(2011년 12월 기준 CPAN 전체 모듈의 최신버전 크기는
약 1.9GB 입니다 - 이 기사의 초고를 썼던 2011년 3월에는 1.3G 였습니다)

minicpan이 하는 일은 모듈들을 내려받는일이 전부이므로 실제 cpan이 해당 경로를
참조하도록 하는 일은 cpan쪽 설정에 별도로 진행해야합니다. 예를 들면

    minicpan -l /Users/yongbin/perl5/minicpan -r http://cpan.mirror.cdnetworks.com/
    
으로 저장소를 전부 내려받았다면, `cpan`으로 실행한 cpan 명령행 환경에서

    o conf urllist unshift /Users/yongbin/perl5/minicpan/
    o conf commit
    
위 두줄을 입력하거나. 혹은 위에 설명한것 처럼 `$HOME/.cpan/CPAN/MyConfig.pm`를
편집해 urllist 최상위에 local mirror 경로를 넣어주면 됩니다.

### cpanm & cpan-outdated - CPAN을 사용하는 가장 현대적인 방법

[cpanm][cpan-cpanm]과 [cpan-outdated][cpan-cpanoutdated]는 재작년부터 펄 커뮤니티 내부에서
큰 인기를 끌고 있는 cpan client입니다. 저자는 펄에 내장되어있는 cpan과 cpanplus와 같은
CPAN client 보다 좀더 가볍고 쉽게 CPAN을 사용하도록 하기 위해서 cpanm 을 제작했습니다.
cpanm 의 사용방법은 cpan 과 크게 다르지 않습니다 다만 cpan 은 기본적으로 shell에 기반한
환경을 제공한다면 cpanm은 명령행을 통해 원하는 작업을 수행합니다.

    #!bash
    cpanm Fey::ORM                                            # Fey::ORM 에 필요한 모든 의존모듈을 찾아 설치합니다
    cpanm Fey/ORM.pm                                          # 의존성 에러 구문에서 copy & paste 하기 편리합니다(cpan에도 채용됨)
    cpanm --mirror ~/mirrors/minicpan/ --mirror-only Fey::ORM # cpanm with minicpan
    cpanm .                                                   # 현재 작성하는 모듈과 모든 의존모듈을 시스템에 설치합니다

cpanm은 CPAN 저장소에 모듈을 시스템에 설치하지만 cpan과는 다른 메타정보를 참조하며 내부적인
설치방법도 조금 다릅니다. 하지만 최종사용자 입장에서는 좀더 빠르고 간편하게 CPAN을 사용할 수 있습니다.

cpanm이 cpan shell의 install 관련 명령을 보충해 준다면 cpan-outdated는 cpan shell 의 `upgrade` 명령을 보충해 줍니다
앞서 언급했던 것 처럼 CPAN에 올라간 모듈은 매일 조금씩 업데이트 되고 있기 때문에 오늘 설치한 모듈이
언제 구버전이 될지는 알수가 없습니다. 따라서 수시로 사용자는 자신이 보유한 모듈을 최신상태로 유지해야하는데
기존 설치된 모듈의 업데이트를 위해 사용하는 도구가 cpan-outdated 입니다. 사용방법은 간략하게 다음과 같습니다

    #!bash
    cpan-outdated | cpanm


We Want You!
------------

앞서 말한 바와 같이 CPAN은 크고 방대하고 잘 관리되고 있지만 그렇다고
필요 이상으로 엄숙하거나 진지하지 않습니다. 당신이 의미있는 작업을
모듈로 만들어 올린단면 설령 그 모듈이 정말 소수에 사람에게만 의미가 있는
작업이고, 그 구현내용이 여러면에서 아직 서툴더라도 그 누구도 당신의 모듈을
사전에 심사해서 잘못을 지적하지 않습니다. 어찌보면 CPAN은 그 자체가 거대한
생태계와 같은 구조를 가지고 있습니다. 모든 모듈들이 스스로를 위해 존재하고
그럼 존재가 모여 다양성을 확보합니다. 다양성은 특정문제를 해결하는데 있어
우리가 선택할수 있는 다양한 기회를 제공하며 동시에 다양성은 한때 맞다고 생각
한 방법이 틀려 다시 돌아가고자 할때 모두의 위험을 줄여 줄 수 있는 다수를 위한
소수의 안전판을 제공 합니다. 그리고 모든 모듈들은 스스로 진화해 나갑니다.
때로는 비슷한 역활을 하는 모듈끼리 경쟁하며 최종적으로는 사람들이 더 많이
선택한 모듈들이 살아남으며 오랜시간 관리되지 않는 모듈은 한때는
유용했더라도 자연스럽게 도퇴됩니다. 이런 CPAN의 모습은 perl 가지고 있는
기본 철학을 충실하게 보여주고 있습니다.

이 글은 먼저 CPAN에 익숙하지 않는 분들이 CPAN을 사용하는데 알아야하는
내용들을 제 경험에 비추어 안내 형식으로 정리한 글입니다.
이 글이 통해 작게나마 사람들이 perl 과 CPAN을 을 이용해 문제를
해결하는데 도움이 되었기를 기대합니다.  그리고 이 글을 통해 CPAN을
접한 보다 많은 분들이 또 언젠가 혼자 쓰기는 아까운 멋진 무언가를
만드셨다면 가벼운 마음으로 CPAN에 등록해서 우리가 사는 세상을
조금더 풍성하게 만들어 주시기를 기대합니다.

감사합니다.


[twitter-y0ngbin]: http://twitter.com/y0ngbin
[cpan]: http://search.cpan.org/
[perltester]: http://www.cpantesters.org/
[file-map]: http://www.cpantesters.org/distro/F/File-Map.html
[perlcpan]: http://search.cpan.org/~jesse/perl-5.12.2/
[perl-pod]: http://perldoc.perl.org/perlpod.html
[cpan-file-map]: http://search.cpan.org/perldoc?File::Map
[cpan-local-lib]: http://search.cpan.org/perldoc?local::lib
[cpan-perlbrew]: http://search.cpan.org/perldoc?perlbrew
[cpan-minicpan]: http://search.cpan.org/perldoc?minicpan
[cpan-mirrors]: http://www.cpan.org/SITES.html
