Title:    perlbrew, local::lib, smartcd 를 이용하여 Perl 환경 구축하기
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Author:   corund


저자
-----

[@corund][twitter-corund] -
웹프로그래머. 다년간 Java로 웹 개발을 해왔으며 마음에 드는
언어를 찾아 여러 언어를 전전하다  Perl의 매력을 발견하고 현재
주로 Perl로 개발. Catalyst 프레임워크로 웹 개발을 하며 현재
http://estin.net을 구축 및 운영 중이다.



들어가며
--------

Perl은 하위 호환성이 좋고 `cpan`이라는 막강한 툴이 있기 때문에 특별히
버전이나 모듈들을 관리할 필요가 많진 않습니다. 하지만 일반에게 서비스할
웹 서비스를 개발하거나 따로 배포할 프로그램을 개발한다면 특별히 버전과
모듈들을 관리할 필요가 있습니다. 또한 아직 OS 배포본에서 공식 지원하기
전의 최신 Perl을 실험해 보고 싶은 경우도 있습니다.  Linux나 OSX을
쓴다면 이런 때 [perlbrew][perlbrew_home]와
[local::lib][local_lib_home]를 이용해 버전과 모듈들을 따로 관리할 수
있습니다.  덧붙여 [smartcd][smartcd_home]와 같은 `bash` 유틸리티를
이용하면 이를 더욱 편리하게 이용할 수 있습니다.


예제
-----

이 예제에서는 Perl 5.12.x(현재 5.12.4) 버전을 주로 사용하며 5.14.x(현재
5.14.2) 버전을 시험하는 경우를 보이겠습니다.  `~/project` 디렉터리 밑에
여러 프로젝트를 두고 `~/project/catalyst` 디렉터리는 `Catalyst`
웹 프로젝트를, `~/project/wx` 디렉터리는 `Wx` GUI 어플리케이션
프로젝트를 두고 관련 모듈들을 따로 관리하는 경우를 가정하겠습니다.
`~/project/pilot` 디렉터리 밑에서는 5.14.x 버전을 시험하는 프로젝트를
두겠습니다.

즉 일반적인 경우의 Perl 버전은 5.12.4가 되며 `~/project/pilot`
디렉터리로 가면 버전이 5.14.2가 되고, `~/project/catalyst` 와
`~/project/wx`에서 각각 따로 모듈을 관리, 이용할 수 있게 하는
것입니다.



perlbrew & local::lib
----------------------

먼저 여러 버전의 Perl을 사용하기 위해선 `perlbrew`를 설치해야
합니다. 여기서는 `perlbrew`를 `~/perl5/perlbrew` 디렉터리에
설치하겠습니다.

명령행에서 다음과 같이 합니다.

    export PERLBREW_ROOT=~/perl5/perlbrew
    curl -kL http://xrl.us/perlbrewinstall | bash

![perlbrew install][perlbrewinstall]

`perlbrew`가 설치되었고 안내에 따라 다음과 같이 `bash`
초기화 파일(`.bashrc` 또는 `.profile`)에 스크립트를 추가합니다.

    echo "source ~/perl5/perlbrew/etc/bashrc" >> .bashrc
   
다시 로그인하면 `perlbrew`를 사용할 수 있습니다. 이제 `install` 명령을
사용하여 5.12.4 버전과 5.14.2 설치할 수 있습니다.

    perlbrew install perl-5.2.14 -D usethreads
    perlbrew install perl-5.14.2 -D usethreads

기본으로 5.12.4 버전을 사용하도록 하겠습니다.

    perlbrew switch perl-5.12.4
    perl -v

![check perl install][check_perl_install]

각 버전의 Perl에 대해 `cpanm`과 `local::lib`를 설치합니다.

    cpan App::cpanminus local::lib
    perlbrew use perl-5.14.2
    cpan App::cpanminus local::lib

이후 모든 모듈들은 `local::lib`를 이용하여 `~/perl5/local` 디렉터리
밑에 관리하겠습니다.



smartcd
--------

`perlbrew`나 `local::lib`나 모두 환경 변수를 이용하여 스위칭할 Perl
버전과 모듈 설치 & 검색 디렉터리를 지정합니다.  따라서 필요할 때마다
환경 변수를 바꿔야 하는데 이를 디렉터리를 옮길 때마다 자동으로 바꾸게
할 수 있는 유틸리티가 `smartcd` 입니다. `smartcd`는 다음과 같이 쉽게
설치할 수 있습니다.

    cd project
    git clone git://github.com/cxreg/smartcd.git
    cd smartcd
    make install
    make setup

`smartcd`는 홈 디렉터리에 `.bash_arrays`, `.bash_smartcd`,
`.bash_varstash` 파일을 만들고 `bash` 초기화 파일에 초기화 코드를
설정합니다. 디렉터리를 옮겨갈 때마다 지정한 shell script를 실행하는데
이는 `~/.smartcd` 디렉터리 밑에 지정합니다.

먼저 `~/project/catalyst` 디렉터리로 들어가면 `local::lib` 로
`~/perl5/local/5.12.5/catalyst` 디렉터리 밑의 모듈들을 관리할 수
있도록 해보겠습니다.

    perl -Mlocal::lib=~/perl5/local/5.12.4/catalyst

![init local::lib][init_local_lib]

이와 같은 명령을 내리면 `~perl5/local/5.12.4/catalyst` 디렉터리를
생성하고 모듈들을 관리할 구조들을 생성합니다.  그리고 환경 변수를
지정할 코드들이 출력됩니다.  보통은 이 구문을 `bash` 초기화 파일에
추가합니다만 여기서는 `smartcd`로 관리할 것이므로 `~/.smartcd`
디렉터리 밑에 설정하겠습니다.

`~/.smartcd/home/purple/project/catalyst` 디렉터리를 만들고 그 밑에
`bash_enter` 라는 파일을 만듭니다. 이 파일이 `smartcd` 로
`~/project/catalyst` 디렉터리에 들어갈 때 실행되는
스크립트입니다. 여기에서 `local::lib` 설정을 하도록 하면 됩니다.

    mkdir -p ~/.smartcd/home/<your_account>/project/catalyst
    cd ~/.smartcd/home/<your_account>/project/catalyst
    vi bash_enter

`bash_enter` 파일의 내용은 다음과 같습니다.

    eval $(perl -Mlocal::lib=~/perl5/local/5.12.4/catalyst | sed 's/export/autostash/')

`perl -Mlocal::lib=~/perl5/local/5.12.4/catalyst` 로 출력되는 환경
변수 세팅을 하는 스크립트인데, `export`를 사용하지 않고 `smartcd`의
`autostash`를 사용하도록 `sed`를 이용하여 바꿨을 뿐입니다.
`autostash`는 현재 환경 변수 값을 저장하고 지정한 값으로 바꾼 다음,
디렉터리를 떠날 때 원래 값으로 복원하는 동작을 합니다.  이렇게
함으로써 `~/project/catalyst` 디렉터리로 들어오면 `local::lib` 로
관리가 되어 지정한 디렉터리(`~/perl5/local/5.12.4/catalyst`)에 모듈을
설치하고 사용할 수 있게 됩니다. 이제 `cpanm` 등을 사용하여 필요한 모듈을
설치할 수 있습니다.

    cd ~/project/catalyst
    cpanm Catalyst::Runtime

같은 방식으로 `~/project/wx` 디렉터리에는 `~/perl5/local/5.12.4/wx` 에
모듈을 관리하도록 설정하자면 다음과 같습니다.

    cd
    perl -Mlocal::lib=~/perl5/local/5.12.4/wx
    mkdir -p .smartcd/home/<your account>/project/wx
    cd .smartcd/home/<your accunt>/project/wx
    echo 'eval $(perl -Mlocal::lib=~/perl5/local/5.12.4/wx | sed '\''s/export/autostash/'\'')' > bash_enter

이제 `~/project/wx` 디렉터리로 들어가 원하는 모듈을 설치하고 사용할 수
있습니다.

    cd ~/project/wx
    cpanm Wx

이제 `~/project/pilot` 디렉터리로 들어가면 `perlbrew`를 이용하여
5.14.2 버전을 사용하도록 하겠습니다.  `perlbrew`에는 일시적으로 Perl
버전을 바꾸는 명령어(`use`)가 있습니다. 이것을 이용하면 특정 디렉터리에
들어갈 때 버전을 바꾸게 할 수 있습니다만, 이러면 `smartcd` 설정이
복잡해집니다(즉 디렉터리에 들어갈 때 실행할 스크립트 `bash_enter`에서
원래 버전을 저장해두고 버전을 바꾼 다음, 나올 때 실행하는 스크립트
`bash_leave`에서 복원하도록 해야 합니다).  다행히 `perlbrew`가 어떻게
동작하는지 살펴봐서 그 코드를 살짝 가져와서 간단히 처리할 수 있습니다.

`perlbrew env` 명령어는 Perl 버전을 스위칭할 때 지정하는 환경 변수를
출력합니다. 이 환경 변수들과 `PATH` 환경 변수를 변경함으로써
`perlbrew`는 Perl 버전을 스위칭합니다.  이를 따라한
`~/.smartcd/home/<your_accout>/project/pilot/bash_enter` 의 내용은
다음과 같습니다.

    eval $(perlbrew env perl-5.14.2 | sed 's/export\(.*\)$/autostash\1;/')
    autostash PATH_WITHOUT_PERLBREW="$(perl -e 'print join ":", grep { index($_, $ENV{PERLBREW_ROOT}) } split/:/,$ENV{PATH};')"
    autostash PATH="$PERLBREW_PATH:$PATH_WITHOUT_PERLBREW"

`perlbrew env`를 이용하여 스위칭에 필요한 환경 변수 값을
얻고 이를 `sed`를 이용하여 `smartcd`에서 이용할 수 있도록 수정합니다.
`perlbrew` 소스에서 가져온 밑의 2줄의 코드를 이용하여 `PATH` 변수를
바꿔 버전을 바꾸도록 합니다.

이제 `~/project/pilot` 으로 들어가면 5.14.2 버전으로 바뀌게 됩니다.

![switch perl version][switch_perl_version]

5.12.4 버전의 경우와 마찬가지로 `~/project/pilot` 디렉터리 밑에 하부 디렉터리를
만들고 `local::lib`로 각각 모듈을 관리할 수 있습니다.

    perl -Mlocal::lib=~/perl5/local/5.14.2/catalyst
    mkdir -p ~/.smartcd/home/<your_account>/project/pilot/catalyst
    cd ~/.smartcd/home/<your_account>/project/pilot/catalyst
    echo 'eval $(perl -Mlocal::lib=~/perl5/local/5.14.2/catalyst | sed '\''s/export/autostash/'\'')' > bash_enter
    cd ~/project/pilot/catalyst
    perl -v
    cpanm Catalyst::Runtime


마치며
-------

처음 Java에서 Perl로 넘어왔을 때 가장 편하면서도 불편했던 것이
`cpan`이었습니다.  원하는 모듈을 간편히 설치해준다는 점에서 편했지만
배포시 모듈을 어떻게 관리해야 할지가 불편했던 것이죠(정확히는
불편했다기 보다는 무엇이 어떻게 돌아가는지 몰라서 불안했던 것이죠).
하지만 `perlbrew`와 `local::lib`를 알고 이 사용법들을 조금씩
익혀가면서 모듈들을 편하게 다룰 수 있다는 것을 알게 되었습니다.  이
둘은 마치 마술처럼 동작하지만 사실은 몇가지 환경 변수를 조작하는 아주
간단히 조작할 수 있는 동작을 합니다.  그래서 `smartcd`와 같은 `shell`
유틸리티를 사용하면 편하게 개발 환경을 구축할 수 있는 겁니다.



[perlbrew_home]: http://search.cpan.org/~gugod/App-perlbrew-0.33/bin/perlbrew
[local_lib_home]: http://search.cpan.org/~apeiron/local-lib-1.008004/lib/local/lib.pm
[smartcd_home]: https://github.com/cxreg/smartcd

[perlbrewinstall]: perlbrewinstall.png
[check_perl_install]: check_perl_install.png
[init_local_lib]: init_local_lib.png
[switch_perl_version]: switch_perl_version.png
