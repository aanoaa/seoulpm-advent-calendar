Title:    유니코드 인코딩/디코딩
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Author:   newbcode

저자
-----

[@newbcode][twitter-newbcode] - 사랑스러운 딸 바보 도치파파.
[리눅스의 모든것][yes24-11040637]의 공동저자.


시작하며
---------

[위키백과][wiki-ko-encoding]를 따르면 인코딩(encoding)은 정보의 형태나 형식을
표준화, 보안, 처리 속도 향상, 저장 공간 절약 등을 위해서 다른 형태나 형식으로
변환하는 처리 혹은 그 처리 방식을 말한다고 합니다.
인코딩/디코딩은 다루는 자료의 종류에 따라 의미하는 바가 조금씩 다르지만
지금은 유니코드 인코딩/디코딩으로 한정합니다.

    #!plain
    I/O 스트림
    +--------+              +-------------+              +------+
    |        |  표준 입력   |             |  표준 출력   |      |
    | 키보드 +------------->| 펄 프로그램 |+------------>| 화면 |
    |        |              |             |              |      |
    +--------+              +-------------+              +------+

앞의 그림은 가장 일반적인 입출력 스트림(input/output stream)을 보여줍니다.
입출력 스트림은 *바이트 스트림(byte stream)*과 *문자 스트림(character stream)* 두 종류로 나눌 수 있습니다.
입력 스트림을 통해 전달되는 자료는 프로그램, 즉 펄 프로그램을 만나기 전까지는 바이트 스트림으로 존재합니다.
펄 프로그램에서 바이트 스트림을 어떻게 처리하느냐가 펄에서의 인코딩/디코딩의 핵심입니다.
실제 웹 상에 있는 HTML 문서를 이용해서 직접 인코딩/디코딩을 살펴봅니다.


주의
----

unicode에 관해서는 perldoc의 unicode문서를 참조합니다.


준비물
-------

- [CPAN의 Encode 모듈][cpan-encode]

인코딩과 Deconding을 확인하기 위한 Encode 모듈이 필요합니다.
cpan 명령어를 통해 Encode 모듈을 설치 합니다.

    newbcode@newb-dt:~/advent_2013$  cpan Encode

- [CPAN의 LWP::UserAgent 모듈][cpan-lwp-useragent]

인코딩과 Deconding을 확인하기 위한 Encode 모듈이 필요합니다.
html을 가져오기 위한 LWP::UserAgent 모듈도 필요합니다.
cpanm 명령어를 통해 모듈을 설치 합니다.

    newbcode@newb-dt:~/advent_2013$  cpan LWP::UserAgent

- [CPAN의 Data::Printer 모듈][cpan-data-printer]

data 구조를 보기위한 Data::Printer 모듈도 설치합니다.

    newbcode@newb-dt:~/advent_2013$  cpan Data::Printer

html의 encoding과 decoding을 하기위한 타겟 페이지가 필요합니다.
        -kma.go.kr


HTML En/디코딩
-------------------

html문서를 다루기 위해 LWP::UserAgent를 이용하여 html 문서를 다운로드 합니다.
다운로드가 완료되면 콘솔에 출력을 합니다.

    #!/usr/bin/env perl

    use strict;
    use warnings;
    use LWP::UserAgent;
    use Data::Printer;
    use Encode qw(encode decode);

    my $url = 'http://www.kma.go.kr/weather/observation/currentweather.jsp';

    my $ua = LWP::UserAgent->new;
    my $resp = $ua->get($url);

    if ($resp->is_success) {
        print $resp->content;
    }
    else {
        die $resp->status_line;
    }

위와 같은 소스로 콘솔에 프린트를 하면 아래와같이 한글이 깨지는 것을 볼수 있습니다.

    <option value=''>17û-----------------</option>
    <option value="http://www.nts.go.kr/">����û</option>
    <option value="http://www.customs.go.kr/">����û</option>
    <option value="http://www.pps.go.kr/">����û</option>
    <option value="http://kostat.go.kr/">����û</option>


기상청의 html은 "charset=euc-kr"로 인코딩 되어 있습니다.
여기서 확인 할 수 있는 부분은 Content-Type Header에 문자인코딩(charset=euc-kr)이 되어있는 것을 볼 수 있습니다.
위에서 본 것과 같이 Data가 Perl을 만나기전까지의 인코딩은 euc-kr로 되어있고 다시 Perl의 내부로 들어오게 될때 디코딩을 하게 되지 않으면 문자는 깨져서 보이게 됩니다.
(Perl을 거치지 않은 모든 표준입력은 perl에서는 바이트 스트림으로 취급하게 됩니다)


    html 문서(charset=euc-kr)  ==========>    perl(LWP::UserAgent)  ==========> console (문자깨짐)
    (perl의 input stream)                     (decodeing 하지 않음)


표준입력이 perl 내부로 들어오고 나갈때는 decoding이 되어서 나가야하는데 perl에서 decoding을 하지 않았기 때문에 문자가 깨지게 됩니다.
보통 이 byte stream을 perl이 읽으면 펄은 여전히 byte stream으로 인식하게되는데 보통 읽고 저장하고 쓰는데는 큰문제가 없지만 정규표현식으로 매칭을 한다거나 한글같은 unicode를 표현할때는 깨진 바이트 단위로 인식을 하기 때문에 곤란해 지게 됩니다.
perl은  Internal unicode string을  내부적으로 가지고 있습니다.
byte stream이 "string + notag"라면 perl은 내부에서 byte stream을 decoding 하기 위해 "string + unicodetag"를 붙입니다.
그리고 내부에 항상 tag를 생성하여 관리를 하게 됩니다.
string을 unicode string으로 만드는 함수가 바로 decode함수 입니다.
외부에서 들어오는 euc-kr이나 utf8로 encoding되어 있는 string을 perl 내부에서 인식할수 있는 형태로 decoding을 하게 됩니다.
그러면 위의 html의 문서를 깨지지 않게 출력하려면 어떻게 해야 할까요? decode 함수를 호출하면 되겠죠?

    #!/usr/bin/env perl

    use strict;
    use warnings;
    use LWP::UserAgent;
    use Data::Printer;
    use Encode qw(encode decode);

    my $url = 'http://www.kma.go.kr/weather/observation/currentweather.jsp';

    my $ua = LWP::UserAgent->new;
    my $resp = $ua->get($url);

    if ($resp->is_success) {
        print $resp->decoded_content;
    }
    else {
        die $resp->status_line;
    }

아래와 같이 정상적으로 출력되는 것을 볼 수 있습니다.

    <option value=''>17청-----------------</option>
    <option value="http://www.nts.go.kr/">국세청</option>
    <option value="http://www.customs.go.kr/">관세청</option>
    <option value="http://www.pps.go.kr/">조달청</option>
    <option value="http://kostat.go.kr/">통계청</option>\

결론적으로 아래와 같은 형태가 됩니다.

    html 문서(charset=euc-kr)  ==========>    perl(LWP::UserAgent)  ==========> console (정상출력)
    (perl의 input stream)                     (decoded_content를 사용)

perl은 내부적으로  unicode의 utf8을 채택한덕에 한글지원이 가장 잘되는 언어가 되었습니다.


Wide character in print at.
-----------------------------

perl로 출력을 하다보면 아래와 같은 경고메세지를 볼 경우가 종종있습니다.
이 경우의 경고 메세지는 perl로 들어온 unicode를 byte stream인것처럼 출력을 하면서 경고를 내보내는 것입니다.

    newbcode@newb-dt:~/advent_2013$ ./encoding.pl |grep 국회사무쳐
    Wide character in print at ./encoding.pl line 16.
    newbcode@newb-dt:~/advent_2013$ ./encoding.pl |grep 국회사무처
    Wide character in print at ./encoding.pl line 16.
    <option value="http://nas.na.go.kr/">국회사무처</option>

이 경우는 print encode('utf8', $string)으로 매번 encoding을 해주어야 합니다.
출력시 encoding을 하지 않고 encode 함수를  아래와 같이 사용하여도 됩니다.

    #!/usr/bin/env perl

    use strict;
    use warnings;
    use LWP::UserAgent;
    use Data::Printer;
    use Encode qw(encode decode);

    my $url = 'http://www.kma.go.kr/weather/observation/currentweather.jsp';

    my $ua = LWP::UserAgent->new;
    my $resp = $ua->get($url);

    if ($resp->is_success) {
        my $html = $resp->decoded_content;
        my $encode_html = encode('utf8', $html);
    }
    else {
            die $resp->status_line;
    }


use utf8;
----------

그래서 use utf8 pragma를 사용하면 파일에 있는 모든 string들의 encoding을 utf8로 간주하고 internal unicode string으로 변환해주는 것을 자동으로 해주게 되어 개발자는 encoding을 다루는데에 있어서 귀찬은것을 상당이 많이 줄 일수 있습니다.

    #!/usr/bin/env perl

    use strict;
    use warnings;
    use LWP::UserAgent;
    use Data::Printer;
    use Encode qw(encode decode);
    use utf8;

    my $url = 'http://www.kma.go.kr/weather/observation/currentweather.jsp';

    my $ua = LWP::UserAgent->new;
    my $resp = $ua->get($url);

    if ($resp->is_success) {
        my $html = $resp->decoded_content;
        utf8::encode($html);
        print "$html";
    }
    else {
        die $resp->status_line;
    }



    출력화면

    newbcode@newb-dt:~/advent_2013$ ./encoding.pl |grep 국회사무처
    <option value="http://nas.na.go.kr/">국회사무처</option>


모든게 귀찮으면 binmode.....
------------------------------

binmode는 표준입력 파일핸들과 표준출력 파일핸들에다가 encoding tag를 추가합니다.
binmode는 표준입력으로 들어오는 것은 자동으로 decode하고, 표준 출력으로 나가는건 자동으로 encode를 진행합니다.

    binmode STDIN, ":encoding(euc-kr)";
    binmode STDOUT, ":encoding(euc-kr)


정리하며
---------

인코딩/디코딩은 어떤 언어이든지 한두번은 Hell을 만나게 됩니다.
하지만 perl은 이런 문제를 위와같이 간단하게 해결 할 수 있는 방법들을 제공합니다.
이것은 perl이 Internal Unicode로 utf8을 구현했기 때문입니다.
Perl의 창시자인 Larry Wall이 언어학자인 덕분이기도 할 것입니다.
인코딩/디코딩과 같은 Hell에 빠지는것보다는 좀더 여러분의 프로그램에게 애정을 쏟기를 바랍니다.


참고문서
---------

    https://github.com/aero/perl_docs/wiki/Unicode-in-Perl
    http://perldoc.perl.org/perlunicode.html
    http://perldoc.perl.org/utf8.html
    http://gypark.pe.kr/wiki/Perl/%ED%95%9C%EA%B8%80



[twitter-newbcode]:       http://twitter.com/#!/newbcode
[cpan-encode]:            http://metacpan.org/module/Encode
[cpan-lwp-useragent]:     http://metacpan.org/module/LWP::UserAgent
[cpan-data-printer]:      http://metacpan.org/module/Data::Printer
[yes24-11040637]:         http://www.yes24.com/24/goods/11040637
[wiki-ko-encoding]:       http://ko.wikipedia.org/wiki/%EB%B6%80%ED%98%B8%ED%99%94
