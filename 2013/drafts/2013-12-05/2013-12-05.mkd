Title:    pcap을 이용한 네트워크 패킷 캡쳐
Package:  Seoul.pm
Category: pcap
Category: perl
Category: Seoul.pm
Author:   luzluna

설치하기
========

먼저 Net::Pcap 설치에 필요한 라이브러리를 설치합니다.
$ sudo apt-get install libpcap-dev
패키지 목록을 읽는 중입니다... 완료
의존성 트리를 만드는 중입니다.
상태 정보를 읽는 중입니다... 완료
다음 패키지를 더 설치할 것입니다:
  libpcap0.8-dev
다음 새 패키지를 설치할 것입니다:
  libpcap-dev libpcap0.8-dev
0개 업그레이드, 2개 새로 설치, 0개 제거 및 384개 업그레이드 안 함.
288 k바이트 아카이브를 받아야 합니다.
이 작업 후 644 k바이트의 디스크 공간을 더 사용하게 됩니다.
계속 하시겠습니까? [Y/n] y
받기:1 http://ftp.debian.org/debian/ jessie/main libpcap0.8-dev amd64 1.4.0-2 [265 kB]
받기:2 http://ftp.debian.org/debian/ jessie/main libpcap-dev all 1.4.0-2 [22.6 kB]
내려받기 288 k바이트, 소요시간 3초 (72.2 k바이트/초)
Selecting previously unselected package libpcap0.8-dev.
(데이터베이스 읽는중 ...현재 199094개의 파일과 디렉터리가 설치되어 있습니다.)
libpcap0.8-dev 패키지를 푸는 중입니다 (.../libpcap0.8-dev_1.4.0-2_amd64.deb에서) ...
Selecting previously unselected package libpcap-dev.
libpcap-dev 패키지를 푸는 중입니다 (.../libpcap-dev_1.4.0-2_all.deb에서) ...
man-db에 대한 트리거를 처리하는 중입니다 ...
libpcap0.8-dev (1.4.0-2) 설정하는 중입니다 ...
libpcap-dev (1.4.0-2) 설정하는 중입니다 ...


이제 Net::Pcap 모듈을 설치합니다.

$ cpanm Net::Pcap
--> Working on Net::Pcap
Fetching http://www.cpan.org/authors/id/S/SA/SAPER/Net-Pcap-0.17.tar.gz ... OK
Configuring Net-Pcap-0.17 ... OK
Building and testing Net-Pcap-0.17 ... ^[[AOK
Successfully installed Net-Pcap-0.17
1 distribution installed


첫번째 프로그램
===============

패킷캡쳐에 사용할 디바이스를 화면에 출력하는 간단한 프로그램입니다.

use Net::Pcap;

my $err = '';
my $dev = pcap_lookupdev(\$err);  # find a device

print $dev,"\n";




$ perl pcap.pl

$

아무것도 안나오네요.

pcap모듈은 디바이스에 직접 접근하기 때문에 root권한이 있어야 제대로 동작합니다. 그럼 해볼까요?

$ sudo perl pcal.pl
Can't locate Net/Pcap.pm in @INC (you may need to install the Net::Pcap module) (@INC contains: /etc/perl /usr/local/lib/perl/5.18.1 /usr/local/share/perl/5.18.1 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.18 /usr/share/perl/5.18 /usr/local/lib/site_perl .) at pcap.pl line 1.
BEGIN failed--compilation aborted at pcap.pl line 1.
$

헉 이건 또 뭔 에러... 미궁으로 빠져듭니다.

sudo를 실행하는 순간 내가 사용하던 perl 버전이 아니라 다른 펄 버전을 사용하게 되면서 아까 설치했던 Net::Pcap 모듈을 찾지 못해서 그러는건데요. 다음의 명령으로 상황을 확인할 수 있습니다.

$ which perl
/home/user/perl5/perlbrew/perls/perl-5.18/bin/perl
$ sudo which perl
/usr/bin/perl

네.. sudo를 하는 순간 /usr/bin/perl 이걸 실행해버리게 되네요...

해결책인 두가지가 있습니다.

첫번째는 sudo를 할때 사용할 perl버전의 full path를 다 넣어주는 방법.

$ sudo /home/user/perl5/perlbrew/perls/perl-5.18/bin/perl pcap.pl
eth0
$

잘 되네요. 그런데 매번 실행할때마다 저 복잡한 라인을 다 쓰려니 귀찮습니다. 다른 방법을 찾아보도록 하겠습니다.

두번째는 쉬뱅라인을 펄 프로그램에 삽입하여 특정 펄을 실행하도록 강제하는 방법입니다.

먼저 소스를 아래와 같이 바꿉니다.

 #!/home/user/perl5/perlbrew/perls/perl-5.18/bin/perl
use Net::Pcap;

my $err = '';
my $dev = pcap_lookupdev(\$err);  # find a device

print $dev,"\n";

그리고 스크립트에 실행 권한을 줍니다.

$ chmod +x pcap.pl

이제 실행해보겠습니다.

$ sudo ./pcap.pl
eth0

잘 되네요.

실제 패킷 캡쳐해보기
====================
Net::Pcap 모듈을 사용할 준비가 되었으니 이제 패킷을 캡쳐해봐야겠지요?

 #!/home/bilbo/perl5/perlbrew/perls/perl-5.18/bin/perl
use Net::Pcap;

my $err = '';
my $dev = pcap_lookupdev(\$err);  # find a device

print $dev,"\n";
my $pcap = pcap_open_live($dev, 1024, 1, 0, \$err);

pcap_loop($pcap, 3, \&process_packet, "just for the demo");

pcap_close($pcap);

sub process_packet {
    my ($user_data, $header, $packet) = @_;
    printf "%d/%d %d\n",$header->{caplen}, $header->{len}, length($packet);
}


실행해보겠습니다.

$ sudo ./pcap.pl
eth0
66/66 66
1024/1514 1024
60/60 60
$

총 3번 패킷을 캡쳐하여 캡쳐된 길이, 헤더이 기록된 길이, 그리고 캡쳐된 데이터의 실제 길이를 찍어보았습니다.


필터기능
========
아무 패킷이나 막 다 캡쳐를 하니까 내가 원하는걸 골라서 찍어볼 수가 없네요..

다음과 같이 필터 기능을 넣어봅니다.


#!/home/bilbo/perl5/perlbrew/perls/perl-5.18/bin/perl
use Net::Pcap;

my $err = '';
my $dev = pcap_lookupdev(\$err);  # find a device

print $dev,"\n";
my $pcap = pcap_open_live($dev, 1024, 1, 0, \$err);

my $filter;
my $filter_str = "host advent.perl.kr";
pcap_compile($pcap, \$filter, $filter_str, 1, 0);
pcap_setfilter($pcap, $filter);

pcap_loop($pcap, 10, \&process_packet, "just for the demo");

pcap_close($pcap);

sub process_packet {
    my ($user_data, $header, $packet) = @_;
    printf "%d/%d %d\n",$header->{caplen}, $header->{len}, length($packet);
}

핵심은 다음의 2 라인입니다.

pcap_compile($pcap, \$filter, $filter_str, 1, 0);
pcap_setfilter($pcap, $filter);

먼저 필터를 컴파일 한 뒤(pcap_compile) 필터를 적용합니다.(pcap_setfilter)

여기에서는 "host advent.perl.kr" advent.perl.kr사이트와 통신하는 모든 패킷을 캡쳐하라고 필터를 지정해보았습니다.
이걸 사용하려면 필터 사용 문법을 알아야 하는데요. tcpdump의 메뉴얼을 찾아보시면 여기에서 사용할 수 있는 문법들과 예제를 보실 수 있습니다.

유용하게 쓰일만한 필터 몇가지

host advent.perl.kr      # advent.perl.kr 과 통신하는 모든 패킷
dst host advent.perl.kr  # destination 이 advent.perl.kr 인 패킷
src host advent.perl.kr  # source 가 advent.perl.kr 인 패킷
port 80                  # port가 80인 패킷
dst port 80              # destination port 가 80인 패킷
src port 80              # source port 가 80인 패킷
len <= 10                # 10 바이트 이하인 패킷
len >= 10                # 10 바이트 이상인 패킷

and, or, ()을 조합하여 다음과 같은 변형이 가능합니다.
ip and not net 192.168.7.0/24  # ip 패킷이면서 192.168.7.0/24대역과 통신하지 않는 패킷
gateway snup and (port ftp or ftp-data)  # snup 게이트웨이를 통과하면서 ftp 포트를 사용하는 패킷

좀 더 복잡한 조합으로
tcp[tcpflags] = tcp-syn and port http  # http 접속중 SYN패킷만 모아서 보기


캡쳐한 패킷 분석하기
====================
분석을 조금 쉽게 하기위해서 다른 모듈의 도움을 좀 받아보도록 하겠습니다.

$ cpanm NetPacket
--> Working on NetPacket::IP
Fetching http://www.cpan.org/authors/id/Y/YA/YANICK/NetPacket-1.4.4.tar.gz ... OK
Configuring NetPacket-1.4.4 ... OK
Building and testing NetPacket-1.4.4 ... OK
Successfully installed NetPacket-1.4.4
1 distribution installed
bilbo@dongsik:~/dev/pcap$ cpanm NetPacket::TCP
NetPacket::TCP is up to date. (1.4.4)
$

소스코드를 다음과 같이 수정해봅니다.

 #!/home/user/perl5/perlbrew/perls/perl-5.18/bin/perl
use Net::Pcap;

my $err = '';
my $dev = pcap_lookupdev(\$err);  # find a device

print $dev,"\n";
my $pcap = pcap_open_live($dev, 1024, 1, 0, \$err);

my $filter;
my $filter_str = "host advent.perl.kr";
pcap_compile($pcap, \$filter, $filter_str, 1, 0);
pcap_setfilter($pcap, $filter);

pcap_loop($pcap, 100, \&process_packet, "just for the demo");

pcap_close($pcap);

use NetPacket::Ethernet qw(:strip);
use NetPacket::IP qw(:strip);
use NetPacket::TCP;
sub process_packet {
    my ($user_data, $header, $packet) = @_;

    my $ip_obj = NetPacket::IP->decode(eth_strip($packet));
    my $tcp_obj = NetPacket::TCP->decode( $ip_obj->{data} );
    printf("%s:%d->%s:%d (%d) ", $ip_obj->{src_ip},$tcp_obj->{src_port}, $ip_obj->{dest_ip},$tcp_obj->{dest_port}, length($tcp_obj->{data}));
    print "FIN " if ( $tcp_obj->{flags} & FIN );
    print "SYN " if ( $tcp_obj->{flags} & SYN );
    print "RST " if ( $tcp_obj->{flags} & RST );
    print "PST " if ( $tcp_obj->{flags} & PST );
    print "ACK " if ( $tcp_obj->{flags} & ACK );
    print "URG " if ( $tcp_obj->{flags} & URG );
    print "ECE " if ( $tcp_obj->{flags} & ECE );
    print "CWR " if ( $tcp_obj->{flags} & CWR );
    print "\n";

    if ( length($tcp_obj->{data}) > 0 ) {
        print $tcp_obj->{data},"\n";
        print "============\n";
    }
}

실행해봅니다.

$ sudo ./pcap.pl
...

다른 콘솔로 접근해서 한번 요청을 해보겠습니다.

$ wget -O - http://advent.perl.kr/2013/
...

출력 결과는 길어서 생략했습니다. 직접 해보세요~
